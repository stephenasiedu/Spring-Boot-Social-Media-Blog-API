package com.example.entity;

import javax.persistence.*;

/**
 * Entity representing a message posted by a user.
 * Includes fields for message ID, user ID, message text, and timestamp.
 * Provides constructors, getters, setters, and standard overrides.
 */
@Entity
@Table(name="message")
public class Message {
    /**
     * Unique identifier for the message, generated by the database.
     */
    @Column(name="messageId")
    @Id
    @GeneratedValue
    private Integer messageId;
    /**
     * Identifier for the user who posted this message.
     */
    @Column(name="postedBy")
    private Integer postedBy;
    /**
     * The content of the message. Must not be blank and must be under 255 characters.
     */
    @Column(name="messageText")
    private String messageText;
    /**
     * The epoch time when this message was posted (seconds since Jan 1, 1970).
     */
    @Column(name="timePostedEpoch")
    private Long timePostedEpoch;
    /**
     * Default no-argument constructor required for JPA and serialization.
     */
    public Message() {
    }
    /**
     * Constructor for creating a new message without an ID.
     * @param postedBy the user ID
     * @param messageText the message content
     * @param timePostedEpoch the posting timestamp
     */
    public Message(Integer postedBy, String messageText, Long timePostedEpoch) {
        this.postedBy = postedBy;
        this.messageText = messageText;
        this.timePostedEpoch = timePostedEpoch;
    }
    /**
     * Constructor for creating a message with all fields.
     * @param messageId the message ID
     * @param postedBy the user ID
     * @param messageText the message content
     * @param timePostedEpoch the posting timestamp
     */
    public Message(Integer messageId, Integer postedBy, String messageText, Long timePostedEpoch) {
        this.messageId = messageId;
        this.postedBy = postedBy;
        this.messageText = messageText;
        this.timePostedEpoch = timePostedEpoch;
    }
    /**
     * Gets the message ID.
     * @return messageId
     */
    public Integer getMessageId() {
        return messageId;
    }
    /**
     * Sets the message ID.
     * @param messageId the message ID
     */
    public void setMessageId(Integer messageId) {
        this.messageId = messageId;
    }
    /**
     * Gets the user ID who posted the message.
     * @return postedBy
     */
    public Integer getPostedBy() {
        return postedBy;
    }
    /**
     * Sets the user ID who posted the message.
     * @param postedBy the user ID
     */
    public void setPostedBy(Integer postedBy) {
        this.postedBy = postedBy;
    }
    /**
     * Gets the message content.
     * @return messageText
     */
    public String getMessageText() {
        return messageText;
    }
    /**
     * Sets the message content.
     * @param messageText the message content
     */
    public void setMessageText(String messageText) {
        this.messageText = messageText;
    }
    /**
     * Gets the epoch time when the message was posted.
     * @return timePostedEpoch
     */
    public Long getTimePostedEpoch() {
        return timePostedEpoch;
    }
    /**
     * Sets the epoch time when the message was posted.
     * @param timePostedEpoch the posting timestamp
     */
    public void setTimePostedEpoch(Long timePostedEpoch) {
        this.timePostedEpoch = timePostedEpoch;
    }
    /**
     * Checks equality based on message fields.
     * @param obj the other object
     * @return true if equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Message other = (Message) obj;
        if (messageId == null) {
            if (other.messageId != null)
                return false;
        } else if (!messageId.equals(other.messageId))
            return false;
        if (messageText == null) {
            if (other.messageText != null)
                return false;
        } else if (!messageText.equals(other.messageText))
            return false;
        if (postedBy == null) {
            if (other.postedBy != null)
                return false;
        } else if (!postedBy.equals(other.postedBy))
            return false;
        if (timePostedEpoch == null) {
            if (other.timePostedEpoch != null)
                return false;
        } else if (!timePostedEpoch.equals(other.timePostedEpoch))
            return false;
        return true;
    }
    /**
     * Returns a string representation of the message.
     * @return string representation
     */
    @Override
    public String toString() {
        return "Message{" +
                "messageId=" + messageId +
                ", postedBy=" + postedBy +
                ", messageText='" + messageText + '\'' +
                ", timePostedEpoch=" + timePostedEpoch +
                '}';
    }
}